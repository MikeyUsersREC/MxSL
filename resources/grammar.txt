statements  : NEWLINE* statement (NEWLINE* statement)* NEWLINE*

statement   : KEYWORD:RETURN expr?
            : KEYWORD:CONTINUE
            : KEEYWORD:BREAK
            : expr

expr        : KEYWORD:DEC IDENTIFIER EQ expr
            : comp-expr (comp-expr)*

comp-expr   : NOT comp-expr
            : arith-expr (EE|LT|GT|LTE|GTE) (arith-expr)*


arith-expr  : term ((PLUS|MINUS) term)*

term        : factor ((MUL|DIV) factor)*

factor      : (PLUS|MINUS) factor
            : power

power       : call (POW factor)*

call        : atom (LPAREN (expr (COMMA expr)*)? RPAREN)

atom        : INT|FLOAT|IDENTIFIER|STRING
            : LPAREN expr RPAREN
            : list-expr
            : if-expr
            : for-expr
            : while-expr
            : func-def

list-expr   : LSQUARE (expr (COMMA expr)*)? RSQUARE




if-expr     : KEYWORD:IF LPAREN expr RPAREN USE
              (statement if-expr-b|if-expr-c)
              | (NEWLINE statements KEYWORD:END|if-expr-b|if-expr-c)

if-expr-b     : KEYWORD:OTHER LPAREN expr RPAREN USE
              (statement if-expr-b|if-expr-c)
              | (NEWLINE statements KEYWORD:END|if-expr-b|if-expr-c)

if-expr-c     : KEYWORD:ELSE
              statement
              | (NEWLINE statements KEYWORD:END)


for-expr    : KEYWORD:ITER IDENTIFIER EQ expr KEYWORD:TO expr
                (KEYWORD:STEP expr)? KEYWORD:USE
                statement
                | (NEWLINE statements KEYWORD:END)


while-expr  : KEYWORD:WHILE expr KEYWORD:USE
            statement
            | (NEWLINE statements KEYWORD:END)

func-def    : KEYWORD:FUNC IDENTIFIER?
                LPAREN(IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
                (ARROW expr)
                | (NEWLINE statements KEYWORD:END)
